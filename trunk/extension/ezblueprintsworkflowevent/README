INSTALL
-------

In administrator user interface, click 'setup' tab->'extensions' menu, select 'ezblueprintsworkflowevent', click button 'Apply Changes', click button 'Regenerate autoload arrays for extensions'. Clear the cache.

Create the eZBluePrintsWorkflowEvent workflow: 'Workflows'->'Standard'->'New workflow'->'ezblueprintsworkflowevent' ( name ezblueprintsworkflowevent ).
Setup eZBluePrintsWorkflowEvent trigger: 'Triggers'-> 'content-publish-after' ( choose eZBluePrintsWorkflowEvent ). Apply changes.
Go to "Content", edit and publish some content object, you will see the "Hello Event".


ABOUT THIS EXTENSION
--------------------

This extension shows how to create and setup the minimum workflow event extension.

First let's analise the following structure inside the extension folder:

    ezblueprintsworkflowevent
        settings
        eventtypes
            event
                ezblueprintsworkflowevent

Then we define all the events this extension has by creating the settings/workflow.ini.append.php file:

<?php
/*
 
[EventSettings]
ExtensionDirectories[]=ezblueprintsworkflowevent
AvailableEventTypes[]=event_ezblueprintsworkflowevent
 
*/
?>

Finally the eventtypes/event/ezblueprintsworkflowevent/ezblueprintsworkfloweventtype.php file.

<?php
 
class eZBluePrintsWorkflowEventType extends eZWorkflowEventType {
    const WORKFLOW_TYPE_STRING = "ezblueprintsworkflowevent";
 
    function eZBluePrintsWorkflowEventType() {
        $this->eZWorkflowEventType(eZBluePrintsWorkflowEventType::WORKFLOW_TYPE_STRING, "eZBluePrintsWorkflowEvent");
        /* define trigger here */
        $this->setTriggerTypes(array('content' => array('publish' => array('after'))));
    }
 
    function execute($process, $event) {
        /* code goes here */
        echo "Hello Event";
        eZExecution::cleanExit();
        //return eZWorkflowType::STATUS_ACCEPTED;
    }
 
}
 
eZWorkflowEventType::registerEventType(eZBluePrintsWorkflowEventType::WORKFLOW_TYPE_STRING, "eZBluePrintsWorkflowEventType");
?>
